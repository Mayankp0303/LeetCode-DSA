class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int dist1[] = new int[edges.length+1];
        int dist2[] = new int[edges.length+1];

        Arrays.fill(dist1,Integer.MAX_VALUE);
        Arrays.fill(dist2,Integer.MAX_VALUE);
        List<List<Integer>> adj = new ArrayList<>();

        for(int i=0;i<edges.length+1;i++){
            adj.add(new ArrayList<>());
        }

        for(int i=0 ; i<edges.length;i++){
            adj.get(i).add(edges[i]);
        }

        bfs(adj,dist1,node1);
        bfs(adj,dist2,node2); 
        int res =-1;
        int ans = Integer.MAX_VALUE;
        for(int i=0;i<dist1.length;i++){

            if(dist1[i]!=Integer.MAX_VALUE && dist2[i] !=Integer.MAX_VALUE){

                int dis = Math.max(dist1[i],dist2[i]);

                if(ans>dis){
                    res = i;
                    ans = dis;
                }
            }
            
        } 
        return res;
    }


    public void bfs(List<List<Integer>> adj , int dist[],int startnode ){

        Queue<Integer> pq = new LinkedList<>();
        pq.offer(startnode);
        dist[startnode] = 0;


        while(!pq.isEmpty()){
            int node = pq.poll();
        
            for(Integer neigh : adj.get(node)){

                if(neigh!=-1 && dist[neigh] > dist[node]+1){
                    dist[neigh] = dist[node] + 1;
                    pq.offer(neigh);
                }
            }
        }
    }
}
